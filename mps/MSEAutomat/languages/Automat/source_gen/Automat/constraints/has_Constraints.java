package Automat.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class has_Constraints extends BaseConstraintsDescriptor {
  public has_Constraints() {
    super("Automat.structure.has");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("color_r", new BasePropertyConstraintsDescriptor("color_r", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "color_r";
        if ((SPropertyOperations.getInteger(propertyValue)) > 255 || (SPropertyOperations.getInteger(propertyValue)) < 0) {
          return false;
        }
        return true;
      }
    });
    properties.put("color_g", new BasePropertyConstraintsDescriptor("color_g", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "color_g";
        if ((SPropertyOperations.getInteger(propertyValue)) > 255 || (SPropertyOperations.getInteger(propertyValue)) < 0) {
          return false;
        }
        return true;
      }
    });
    properties.put("color_b", new BasePropertyConstraintsDescriptor("color_b", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "color_b";
        if ((SPropertyOperations.getInteger(propertyValue)) > 255 || (SPropertyOperations.getInteger(propertyValue)) < 0) {
          return false;
        }
        return true;
      }
    });
    return properties;
  }
}
