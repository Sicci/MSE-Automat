package Automat.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SNodePointer;

public class stores_items_item_Constraints extends BaseConstraintsDescriptor {
  public stores_items_item_Constraints() {
    super("Automat.structure.stores_items_item");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("quantity", new BasePropertyConstraintsDescriptor("quantity", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "quantity";
        if ((SPropertyOperations.getInteger(propertyValue)) >= 0) {
          return true;
        }
        return false;
      }
    });
    properties.put("price", new BasePropertyConstraintsDescriptor("price", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "price";
        if ((SPropertyOperations.getInteger(propertyValue)) > 0) {
          return true;
        }
        return false;
      }
    });
    properties.put("numcode", new BasePropertyConstraintsDescriptor("numcode", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "numcode";
        if (String.valueOf((SPropertyOperations.getInteger(propertyValue))).length() > 4 || String.valueOf((SPropertyOperations.getInteger(propertyValue))).length() < 1) {
          return false;
        }
        return true;
      }
    });
    return properties;
  }

  public static boolean static_canBeAChild(final SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    if (ListSequence.fromList(SNodeOperations.getDescendants(parentNode, "Automat.structure.stores_items_item", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getInteger(it, "numcode") == SPropertyOperations.getInteger(node, "numcode");
      }
    }).count() > 1) {
      return false;
    }
    return true;
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:d6654046-e3fe-4d62-9060-4210d958514f(Automat.constraints)", "8675345724956698348");
}
